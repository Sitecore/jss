const glob = require('glob')
const fs = require('fs-extra')
const path = require('path')

require('dotenv').config();

/* 
What does the script do?

1. It reorganizes the markdown files generated by typedoc to fit our file structure <dir>/<subdir>/en.md.
2. It replaces the links to other documents, according to our link structure.
3. It inserts front-matter in the files.
4. When done, it deletes the directory with the original typedoc output.

HOW TO USE: 
Copy the tsconfig file for the package in the package's root directory. For example, copy tsconfig.nextjs.json in /packages/sitecore-jss-nextjs. 
Rename the tsconfig.nextjs.json file to tsconfig.json.
From a terminal, `cd` into the `/packages/sitecore-jss-nextjs` directory. 
Install typedoc and typedoc-plugin-markdown.
Run `npx typedoc src --readme none`. This will generate the docs under `/data/routes/docs/nextjs/ref-original/`.
When the script is done, `cd` into the docs directory. 
Install glob, dotenv, and fs-extra.
Update/create a .env file with: 

```
DOCS_READ_PATH = "data/routes/docs/nextjs/ref-original" # typedoc.json "out" setting: "../../docs/data/routes/docs/nextjs/ref-original/"
DOCS_WRITE_PATH = "data/routes/docs/nextjs/ref" # where you want the generated docs to sit. Remeber to update nav and links if you change this.
```

Run `node ./build/clean-gen-docs.js`.

Repeat the process for other packages that support typedoc generated docs.
*/

const DOCS_READ_PATH = process.env.DOCS_READ_PATH
const DOCS_WRITE_PATH = process.env.DOCS_WRITE_PATH

function readFiles({ readSource, writeDest }) {

  const files = glob.sync(`${readSource}/**/*.md `)

  const docsRoot = path.join(__dirname, '../')

  // Key-value pairs to hold original file names - keys and our directory-based file paths names (values)
  // Used to replace in-content links
  const generatedFileNames = {}

  files.map(f => {
    let originalName = f.replace(readSource, writeDest).replace('data/routes/', '').replaceAll('.md', '')
    let newName = originalName.replaceAll('.', '/').replaceAll('README', '')
    generatedFileNames[originalName] = newName
  })

  files.map(filePath => {
    let writeFilePath = filePath.replace(readSource, writeDest)

    // Clean links to .md files, README
    let fileContents = fs.readFileSync(filePath, 'utf-8').replaceAll('.md', '').replaceAll('README', '')

    // Get a clean file path without md, README, or dots
    let fileName = writeFilePath.includes('README') ? writeFilePath.replace('/README', '').replace(".md", '') : writeFilePath.replace(".md", '')
    let newFilePath = fileName.replaceAll('.', '/')

    // Ensure the new doc directory exists (will host en.md file)
    fs.ensureDirSync(newFilePath)
    let newFileName = `${newFilePath}/en.md`

    // Grab route name (for frontmatter name prop)
    let pathSegments = newFilePath.split('/')
    let routeName = pathSegments[pathSegments.length - 1]
    // let docH1s = fileContents.match(new RegExp(/^#\s(.*)/gm))
    
    // rename README to en
    newFilePath.replace('README', 'en')


    // Prepare frontmatter
    let frontmatter = `---
name: ${routeName}
routeTemplate: ./data/component-templates/article.yml
title: ${routeName}
---

`
    // Replace generated md links in content
    
    for (const key in generatedFileNames) {
      fileContents = fileContents.replaceAll(key, generatedFileNames[key])
    }

    // Combine frontmatter with markfown content
    let newFileContent = frontmatter + fileContents

    
    // Assign final writing path value
    let finalWritePath = path.join(docsRoot, newFileName)

    return new Promise((resolve, reject) => {
      fs.outputFileSync(`${finalWritePath}`, newFileContent, {}, (err, f) => {
        if (err) {
          res.status(400).json({ message: `Something went wrong when trying to save Doc with id: ${writeFilePath}.` })
          reject()
        }
        res.status(200).json({
          message: `Saved Doc with id: ${writeFilePath}.`
        })
        resolve()
        
      })
    })
  })
}

readFiles({
  readSource: DOCS_READ_PATH, writeDest: DOCS_WRITE_PATH
})

// Remove original generated files `ref-original`
fs.removeSync(DOCS_READ_PATH)