/* eslint-disable no-unused-expressions */
/* eslint-disable quotes */
import fs from 'fs';
import path from 'path';
import sinon from 'sinon';
import { expect } from 'chai';
import * as utils from '../utils';
import * as commonUtils from '../utils';
import { generateComponentBuilder } from './generate-component-builder';
import { ComponentFile } from '../types';

describe('generate-component-builder', () => {
  afterEach(() => {
    sinon.restore();
  });

  describe('generateComponentBuilder', () => {
    it('default', () => {
      const componentsPath = 'src/components';
      const writeFileStub = sinon.stub(fs, 'writeFileSync');
      const getComponentStub = sinon.stub(utils, 'getComponentList');
      const components: ComponentFile[] = [
        {
          path: 'bar',
          moduleName: 'barModule',
          componentName: 'BarComponent',
        },
      ];
      getComponentStub.withArgs(componentsPath).returns(components);
      sinon.stub(path, 'resolve').callsFake((path) => path);
      const expectedOutput = [
        '/* eslint-disable */\n',
        '// Do not edit this file, it is auto-generated at build time!\n',
        '// See scripts/generate-component-factory.js to modify the generation of this file.\n\n',
        "import { ComponentBuilder } from '@sitecore-jss/sitecore-jss-react';\n",
        "import { Foo } from 'custom-module'\n",
        "import barModule from 'bar';\n\n",
        'const components = new Map();\n',
        "components.set('Foo', Foo)\n",
        "components.set('BarComponent', barModule);\n\n",
        'const componentBuilder = new ComponentBuilder({ components });\n\n',
        'const componentFactory = componentBuilder.getComponentFactory();\n\n',
        'export default componentFactory;\n',
      ].join('');

      generateComponentBuilder({
        componentRootPath: componentsPath,
        packages: [
          {
            name: 'custom-module',
            components: [
              {
                componentName: 'Foo',
                moduleName: 'Foo',
              },
            ],
          },
        ],
      });

      expect(
        writeFileStub.calledWith('src/temp/componentBuilder.js', expectedOutput, {
          encoding: 'utf8',
        })
      ).to.be.true;
    });

    it('watch', () => {
      const watchItemsStub = sinon.stub(commonUtils, 'watchItems');
      const componentsPath = 'src/components';
      const customPackages = [
        {
          name: 'custom-module',
          components: [
            {
              componentName: 'Foo',
              moduleName: 'Foo',
            },
          ],
        },
      ];

      generateComponentBuilder({
        componentRootPath: componentsPath,
        packages: customPackages,
        watch: true,
      });

      expect(watchItemsStub.calledWith([componentsPath])).to.be.true;
    });
  });
});
