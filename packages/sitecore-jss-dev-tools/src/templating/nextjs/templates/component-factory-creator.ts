import { PackageDefinition, ComponentFile, Project } from '../../utils';

const isLazyLoadingModule = (componentPath: string) => componentPath.includes('.dynamic');

const removeDynamicModuleNameEnding = (moduleName: string) =>
  moduleName.replace(/\.?dynamic$/i, '');

/**
 * Generates the contents of the component factory creator file using a predefined string template.
 * @param {(PackageDefinition | ComponentFile | Project)[]} components - the list of component files to include
 * @returns component factory creator file contents
 */
export function generateComponentFactoryCreator(
  components: (PackageDefinition | ComponentFile | Project)[]
): string {
  const componentFiles = components.filter(
    (component) => (component as ComponentFile).componentName
  ) as ComponentFile[];
  const packages = components.filter(
    (component) => (component as PackageDefinition).components
  ) as PackageDefinition[];
  const projects = components.filter(
    (component) => (component as Project).projectName
  ) as Project[];

  const hasLazyModules = componentFiles.find((component) => isLazyLoadingModule(component.path));
/* eslint-disable */
  return `/* eslint-disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-component-factory-creator.ts to modify the generation of this file.

${hasLazyModules ? "import dynamic from 'next/dynamic'" : ''}
import { ComponentFactoryCreator } from '@sitecore-jss/sitecore-jss-nextjs';

${projects
  .map((project) => `import * as ${project.projectName} from './projects/${project.projectName}';`)
  .join('\n')}
${packages
  .map((pkg) => {
    const list = pkg.components.map((c) => c.moduleName).join(', ');
    return `import { ${list} } from '${pkg.name}'`;
  })
  .join('\n')}
${componentFiles
  .map((component) => {
    if (isLazyLoadingModule(component.path)) {
      const moduleName = removeDynamicModuleNameEnding(component.moduleName);
      return `const ${moduleName} = {
  module: () => import('${component.path}'),
  element: (isEditing?: boolean) => isEditing ? require('${component.path}')?.default : dynamic(${moduleName}.module)
}`;
    }

    return `import * as ${component.moduleName} from '${component.path}';`;
  })
  .join('\n')}

const projects = new Map();  
${projects.map((p) => `projects.set('${p.projectName}', ${p.projectName});`).join('\n')}

const components = new Map();
${packages.map((p) =>
  p.components.map(
    (component) => `components.set('${component.componentName}', ${component.moduleName})`
  )
)}
${componentFiles
  .map(
    (component) =>
      `components.set('${
        isLazyLoadingModule(component.path)
          ? removeDynamicModuleNameEnding(component.componentName)
          : component.componentName
      }', ${
        isLazyLoadingModule(component.path)
          ? removeDynamicModuleNameEnding(component.moduleName)
          : component.moduleName
      });`
  )
  .join('\n')}

export const componentFactoryCreator = new ComponentFactoryCreator({ components, projectComponents: projects });
`;
}
