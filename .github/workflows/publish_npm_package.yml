name: Publish library to NPM

on:
  workflow_dispatch:
    inputs:
      release_type:
        required: true
        description: Please select the type of release
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
        default: prerelease

jobs:

  build-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: yarn install

      - name: Bump release version (no git)
        if: inputs.release_type != 'prerelease'
        run: echo "Bump release version!"

      - name: Bump prerelease version (no git)
        if: inputs.release_type == 'prerelease'
        run: echo "Bump prerelease version!"

      - name: Build package
        run: yarn build

      # - name: Upload package artifact
        # uses: actions/upload-artifact@v3
        # with:
          # name: engage-package
          # path: dist/packages/engage/cjs

  publish-package:
    runs-on: ubuntu-latest
    needs: build-package
    outputs:
      release-version: ${{ steps.get-version.outputs.new-version }}
      release-tag: ${{ steps.get-tag.outputs.release-tag }}
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: engage-package

      - name: Get release version
        id: get-version
        run: echo "::set-output name=new-version::$(npm pkg get version)"

      - name: Get release tag
        id: get-tag
        run: |
          [[ "${{ inputs.release_type }}" == prerelease ]] && echo "::set-output name=release-tag::canary"
          [[ "${{ inputs.release_type }}" != prerelease ]] && echo "::set-output name=release-tag::latest"
          
      - name: Create npm token file
        run: echo //registry.npmjs.org/:_authToken=${{secrets.NPMJS_PUBLISH_TOKEN}} > .npmrc

      - name: Publish to NPM
        run: echo "Publish to NPM!"

      # - name: Publish to NPM
      #   uses: JS-DevTools/npm-publish@v1
      #   id: npm-publish
      #   with:
      #     token: ${{ secrets.NPMJS_PUBLISH_TOKEN }}
      #     tag: ${{ env.release-tag }}
      #     access: public
      #     package: ./package.json
      #   env:
      #     release-tag: ${{steps.get-tag.outputs.release-tag}}

      - name: Fail the workflow when unsuccessful publish
        if: steps.npm-publish.outputs.type == 'none'
        run: exit 1

      - name: Show the result
        run: echo "Version changed ${{ steps.npm-publish.outputs.old-version }} => ${{ steps.npm-publish.outputs.version }}"

  update-github:
    runs-on: ubuntu-latest
    needs: publish-package
    env:
      version: ${{ needs.publish-package.outputs.release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Bump release version (post publish)
        if: inputs.release_type != 'prerelease'
        run: echo "Bump release version!"
        # run: npm version ${{inputs.release_type}} --no-git-tag-version --workspace='./packages/engage/'

      - name: Bump prerelease version (post publish)
        if: inputs.release_type == 'prerelease'
        run: echo "Bump prerelease version!"
        # run: npm version ${{inputs.release_type}} --preid canary --no-git-tag-version --workspace='./packages/engage/'

      - name: Push bumped version to source control
        run: echo "Push bumped version to source control!"
        # run: |
        #   git config user.email builds@sitecore.com
        #   git config user.name "Automated Build"
        #   git commit -a -m "Bumping package to new version: ${{env.version}} [skip ci]"
        #   git push

      - name: Format new version tag name
        id: tag-name
        run: echo "Test..."
        # run: echo "::set-output name=version-tag::v.${{fromJson(env.version)}}"

      - name: Push new version tag to source control
        run: echo "Test push new version tag"
        # run: |
        #   git tag -f ${{ env.version-tag }}
        #   git push origin ${{ env.version-tag }} --force
        env:
          version-tag: ${{ steps.tag-name.outputs.version-tag }}
